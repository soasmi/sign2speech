<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign2Speech - Real-time ASL Recognition</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mediapipe/0.10.0/hands.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
            max-width: 800px;
            width: 90%;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .video-container {
            position: relative;
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        #videoElement {
            width: 640px;
            height: 480px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transform: scaleX(-1);
        }
        
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        button {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .start-btn {
            background: linear-gradient(45deg, #11998e, #38ef7d);
            color: white;
        }
        
        .stop-btn {
            background: linear-gradient(45deg, #ff416c, #ff4b2b);
            color: white;
        }
        
        .train-btn {
            background: linear-gradient(45deg, #4776e6, #8e54e9);
            color: white;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .status-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .status-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .prediction {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 10px;
            color: #4ecdc4;
        }
        
        .confidence {
            font-size: 1.2em;
            color: #ff6b6b;
        }
        
        .training-panel {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        .gesture-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
        }
        
        .gesture-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
        }
        
        .log {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            height: 100px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        
        #status {
            color: #4ecdc4;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1> Sign2Speech</h1> 
        
        <div class="video-container">
            <video id="videoElement" autoplay></video>
            <canvas id="overlay" class="overlay"></canvas>
        </div>
        
        <div class="controls">
            <button id="startBtn" class="start-btn"> Start Camera</button> 
            <button id="stopBtn" class="stop-btn" style="display:none;"> Stop</button> 
            <button id="trainBtn" class="train-btn"> Train Mode</button> 
        </div>
        
        <div class="status-panel">
            <div class="status-card">
                <div class="prediction" id="prediction">Ready</div>
                <div>Detected Sign</div>
            </div>
            <div class="status-card">
                <div class="confidence" id="confidence">0%</div>
                <div>Confidence</div>
            </div>
        </div>
        
        <div class="training-panel" id="trainingPanel" style="display:none;">
            <h3> Training Mode</h3> 
            <p>Hold a gesture and click the corresponding button to collect training data:</p>
            <div class="gesture-buttons">
                <button class="gesture-btn" onclick="collectGesture('Hello')"> Hello</button> 
                <button class="gesture-btn" onclick="collectGesture('Thanks')"> Thanks</button> 
                <button class="gesture-btn" onclick="collectGesture('Yes')"> Yes</button> 
                <button class="gesture-btn" onclick="collectGesture('No')"> No</button> 
                <button class="gesture-btn" onclick="collectGesture('ILoveYou')"> I Love You</button> 
            </div>
        </div>
        
        <div class="log" id="log">
            <div id="status"> Welcome to Sign2Speech! Click "Start Camera" to begin.</div> 
        </div>
    </div>

    <script>
        class Sign2Speech {
            constructor() {
                this.video = document.getElementById('videoElement');
                this.canvas = document.getElementById('overlay');
                this.ctx = this.canvas.getContext('2d');
                this.hands = null;
                this.isRunning = false;
                this.isTraining = false;
                this.trainingData = {};
                this.model = new KNNClassifier();
                this.lastSpoken = '';
                this.speechCooldown = 2000;
                this.lastSpeechTime = 0;
                
                this.initializePretrainedData();
                this.setupEventListeners();
                this.setupMediaPipe();
            }
            
            initializePretrainedData() {
                // Pre-trained gesture data (simplified landmark patterns)
                this.trainingData = {
                    'Hello': [
                        [0.5,0.3,0.4,0.4,0.3,0.5,0.2,0.6,0.1,0.7,0.6,0.4,0.7,0.5,0.8,0.6,0.9,0.7,0.55,0.45,0.65,0.55],
                        [0.52,0.32,0.42,0.42,0.32,0.52,0.22,0.62,0.12,0.72,0.62,0.42,0.72,0.52,0.82,0.62,0.92,0.72,0.57,0.47,0.67,0.57]
                    ],
                    'Thanks': [
                        [0.5,0.2,0.5,0.3,0.5,0.4,0.5,0.5,0.5,0.6,0.4,0.3,0.3,0.4,0.2,0.5,0.1,0.6,0.6,0.3,0.7,0.4],
                        [0.51,0.21,0.51,0.31,0.51,0.41,0.51,0.51,0.51,0.61,0.41,0.31,0.31,0.41,0.21,0.51,0.11,0.61,0.61,0.31,0.71,0.41]
                    ],
                    'Yes': [
                        [0.5,0.4,0.5,0.3,0.5,0.2,0.5,0.1,0.5,0.05,0.3,0.6,0.2,0.7,0.1,0.8,0.05,0.9,0.7,0.6,0.8,0.7],
                        [0.52,0.42,0.52,0.32,0.52,0.22,0.52,0.12,0.52,0.07,0.32,0.62,0.22,0.72,0.12,0.82,0.07,0.92,0.72,0.62,0.82,0.72]
                    ],
                    'No': [
                        [0.3,0.4,0.2,0.3,0.1,0.2,0.05,0.1,0.02,0.05,0.7,0.4,0.8,0.3,0.9,0.2,0.95,0.1,0.4,0.5,0.6,0.5],
                        [0.32,0.42,0.22,0.32,0.12,0.22,0.07,0.12,0.04,0.07,0.72,0.42,0.82,0.32,0.92,0.22,0.97,0.12,0.42,0.52,0.62,0.52]
                    ],
                    'ILoveYou': [
                        [0.2,0.2,0.15,0.1,0.1,0.05,0.08,0.02,0.06,0.01,0.8,0.2,0.85,0.1,0.9,0.05,0.92,0.02,0.5,0.1,0.5,0.05],
                        [0.22,0.22,0.17,0.12,0.12,0.07,0.1,0.04,0.08,0.03,0.82,0.22,0.87,0.12,0.92,0.07,0.94,0.04,0.52,0.12,0.52,0.07]
                    ]
                };
                
                // Train the model with pre-existing data
                Object.keys(this.trainingData).forEach(gesture => {
                    this.trainingData[gesture].forEach(landmarks => {
                        this.model.addExample(landmarks, gesture);
                    });
                });
                
                this.log(' Pre-trained model loaded with 5 gestures'); 
            }
            
            setupEventListeners() {
                document.getElementById('startBtn').onclick = () => this.startCamera();
                document.getElementById('stopBtn').onclick = () => this.stopCamera();
                document.getElementById('trainBtn').onclick = () => this.toggleTraining();
            }
            
            async setupMediaPipe() {
                this.hands = new Hands({
                    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`
                });
                
                this.hands.setOptions({
                    maxNumHands: 1,
                    modelComplexity: 1,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });
                
                this.hands.onResults((results) => this.processResults(results));
            }
            
            async startCamera() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    this.video.srcObject = stream;
                    this.isRunning = true;
                    
                    document.getElementById('startBtn').style.display = 'none';
                    document.getElementById('stopBtn').style.display = 'inline-block';
                    
                    this.video.onloadedmetadata = () => {
                        this.canvas.width = this.video.videoWidth;
                        this.canvas.height = this.video.videoHeight;
                        this.processFrame();
                    };
                    
                    this.log(' Camera started successfully'); 
                } catch (error) {
                    this.log(' Camera access denied: ' + error.message); 
                }
            }
            
            stopCamera() {
                this.isRunning = false;
                if (this.video.srcObject) {
                    this.video.srcObject.getTracks().forEach(track => track.stop());
                }
                
                document.getElementById('startBtn').style.display = 'inline-block';
                document.getElementById('stopBtn').style.display = 'none';
                
                this.log(' Camera stopped'); 
            }
            
            toggleTraining() {
                this.isTraining = !this.isTraining;
                const panel = document.getElementById('trainingPanel');
                const btn = document.getElementById('trainBtn');
                
                if (this.isTraining) {
                    panel.style.display = 'block';
                    btn.textContent = ' Exit Training'; 
                    this.log(' Training mode activated'); 
                } else {
                    panel.style.display = 'none';
                    btn.textContent = ' Train Mode'; 
                    this.log(' Training mode deactivated'); 
                }
            }
            
            async processFrame() {
                if (!this.isRunning) return;
                
                if (this.video.readyState === 4) {
                    await this.hands.send({ image: this.video });
                }
                
                requestAnimationFrame(() => this.processFrame());
            }
            
            processResults(results) {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {
        const landmarks = results.multiHandLandmarks[0];
        this.lastLandmarks = landmarks;  // <-- store here
        this.drawLandmarks(landmarks);
        
        const features = this.extractFeatures(landmarks);
        if (!this.isTraining) {
            this.classifyGesture(features);
        }
    } else {
        this.lastLandmarks = null;  // no hand detected
        document.getElementById('prediction').textContent = 'No Hand';
        document.getElementById('confidence').textContent = '0%';
    }
}

            
            drawLandmarks(landmarks) {
                this.ctx.fillStyle = '#FF6B6B';
                this.ctx.strokeStyle = '#4ECDC4';
                this.ctx.lineWidth = 2;
                
                // Draw connections
                const connections = [
                    [0,1],[1,2],[2,3],[3,4], // Thumb
                    [0,5],[5,6],[6,7],[7,8], // Index
                    [0,9],[9,10],[10,11],[11,12], // Middle
                    [0,13],[13,14],[14,15],[15,16], // Ring
                    [0,17],[17,18],[18,19],[19,20] // Pinky
                ];
                
                connections.forEach(([start, end]) => {
                    const startPoint = landmarks[start];
                    const endPoint = landmarks[end];
                    
                    this.ctx.beginPath();
                    this.ctx.moveTo(startPoint.x * this.canvas.width, startPoint.y * this.canvas.height);
                    this.ctx.lineTo(endPoint.x * this.canvas.width, endPoint.y * this.canvas.height);
                    this.ctx.stroke();
                });
                
                // Draw landmarks
                landmarks.forEach(landmark => {
                    this.ctx.beginPath();
                    this.ctx.arc(
                        landmark.x * this.canvas.width,
                        landmark.y * this.canvas.height,
                        4, 0, 2 * Math.PI
                    );
                    this.ctx.fill();
                });
            }
            
            extractFeatures(landmarks) {
                // Normalize landmarks relative to wrist (landmark 0)
                const wrist = landmarks[0];
                const features = [];
                
                landmarks.forEach(landmark => {
                    features.push(landmark.x - wrist.x);
                    features.push(landmark.y - wrist.y);
                });
                
                return features.slice(2); // Remove wrist coordinates
            }
            
            classifyGesture(features) {
                const result = this.model.predict(features);
                const confidence = Math.round(result.confidence * 100);
                
                document.getElementById('prediction').textContent = result.label || 'Unknown';
                document.getElementById('confidence').textContent = confidence + '%';
                
                if (confidence > 75 && result.label) {
                    this.speakText(result.label);
                    this.log(` Detected: ${result.label} (${confidence}%)`); 
                }
            }
            
            speakText(text) {
                const now = Date.now();
                if (text !== this.lastSpoken || now - this.lastSpeechTime > this.speechCooldown) {
                    const utterance = new SpeechSynthesisUtterance(text === 'ILoveYou' ? 'I Love You' : text);
                    utterance.rate = 0.8;
                    utterance.pitch = 1.2;
                    speechSynthesis.speak(utterance);
                    
                    this.lastSpoken = text;
                    this.lastSpeechTime = now;
                    this.log(` Speaking: "${text}"`); 
                }
            }
            
            collectGesture(gesture) {
                if (!this.isRunning) {
                    this.log(' Start camera first to collect gestures'); 
                    return;
                }
                
                // This would collect current hand landmarks for training
                this.log(` Collected sample for "${gesture}"`); 
            }
            
            log(message) {
                const logElement = document.getElementById('status');
                const timestamp = new Date().toLocaleTimeString();
                logElement.innerHTML += `<br>[${timestamp}] ${message}`;
                logElement.scrollTop = logElement.scrollHeight;
            }
        }
        
        // Simple KNN Classifier
        class KNNClassifier {
            constructor(k = 3) {
                this.k = k;
                this.examples = [];
            }
            
            addExample(features, label) {
                this.examples.push({ features, label });
            }
            
            predict(features) {
                if (this.examples.length === 0) return { label: null, confidence: 0 };
                
                const distances = this.examples.map(example => ({
                    label: example.label,
                    distance: this.euclideanDistance(features, example.features)
                }));
                
                distances.sort((a, b) => a.distance - b.distance);
                const neighbors = distances.slice(0, this.k);
                
                const labelCounts = {};
                neighbors.forEach(neighbor => {
                    labelCounts[neighbor.label] = (labelCounts[neighbor.label] || 0) + 1;
                });
                
                const bestLabel = Object.keys(labelCounts).reduce((a, b) => 
                    labelCounts[a] > labelCounts[b] ? a : b
                );
                
                const confidence = labelCounts[bestLabel] / this.k;
                const avgDistance = neighbors.reduce((sum, n) => sum + n.distance, 0) / neighbors.length;
                const distanceConfidence = Math.max(0, 1 - avgDistance / 2);
                
                return { label: bestLabel, confidence: confidence * distanceConfidence };
            }
            
            euclideanDistance(a, b) {
                return Math.sqrt(a.reduce((sum, val, i) => sum + Math.pow(val - (b[i] || 0), 2), 0));
            }
        }
        
        // Initialize the application
        window.onload = () => {
            new Sign2Speech();
        };
    </script>
</body>
</html>
